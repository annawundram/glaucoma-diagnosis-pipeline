import numpy as np
import h5py
import math
import matplotlib.pyplot as plt
from scipy.interpolate import splev, splrep

from scipy.special import softmax as sm

# load Chaksu and file using h5py
path = "PHiSeg_dataset_ROI_100_test.h5"
file = h5py.File(path, 'r')
# Chaksu data
Chaksu = h5py.File("data/Chaksu_ROI_test.h5", 'r')


def entropy_map(segmentation):
    # segmentations (number of segmentations, 3, 320, 320); for experts: one-hot-encoding of labels
    # mean over number of samples
    mean = np.mean(segmentation, axis=0)  # -> (3,320,320)

    # softmax
    probability = sm(mean, axis=0)

    # calculate entropy over channels: for each pixel: x_i * log(x_i); them sum over axis of labels
    entropies = [np.vectorize(lambda x: x * np.log(x) if x != 0 else 0)(probability[0]),
                 np.vectorize(lambda x: x * np.log(x) if x != 0 else 0)(probability[1]),
                 np.vectorize(lambda x: x * np.log(x) if x != 0 else 0)(probability[2])]

    entropy = np.sum(np.asarray(entropies), axis=0)  # -> (320,320)
    return -entropy

# using Chaksu.h5
# file (here): rim thickness from samples generated by DL model as well as corresponding softmax outputs
def rim_plot(i, file, Chaksu, save_dir):
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif', size=11)

    fig = plt.figure(figsize=(20, 10), dpi=250, layout="constrained")
    ax1 = plt.subplot(151)
    ax2 = plt.subplot(152)
    ax3 = plt.subplot(153)
    ax4 = plt.subplot(154, projection='polar')
    ax5 = plt.subplot(155, projection='polar')

    # fundus image
    ax1.imshow(Chaksu["images"][i])
    ax1.axis("off")

    # entropy map experts
    segmentation_experts = Chaksu["annotations"][i]
    # one hot encoded experts
    one_hot_encoded = np.eye(3)[segmentation_experts]
    one_hot_encoded = one_hot_encoded.transpose(0, 3, 1, 2)
    ax2.imshow(entropy_map(one_hot_encoded))
    ax2.axis("off")

    # entropy map model
    segmentation_models = file["segmentations"][i] # segmentation is here the softmax output
    ax3.imshow(entropy_map(segmentation_models))
    ax3.axis("off")

    # rim thickness plot experts
    mean_rt = np.mean(Chaksu["rim_thickness"][i][:], axis=0)
    std_rt = np.std(Chaksu["rim_thickness"][i][:], axis=0)

    x = np.arange(0, 360, 0.5)
    t = np.linspace(0, 360, 720)

    angle = [math.radians(ts) for ts in t]
    w = np.ones_like(x)
    w[0] = 100
    w[-1] = 100
    x2 = np.linspace(0, 360, 720)

    ax4.set_theta_zero_location('S')
    ax4.set_theta_direction(-1)
    ax4.set_ylim(0, 100)
    # mean rim thickness
    spl1 = splrep(x, mean_rt, s=50, w=w)
    y1 = splev(x2, spl1)
    ax4.plot(angle, y1, linewidth=1, color='midnightblue')
    # stdv rim thickness
    spl2 = splrep(x, mean_rt - std_rt, s=50, w=w)
    y2 = splev(x2, spl2)
    spl3 = splrep(x, mean_rt + std_rt, s=50, w=w)
    y3 = splev(x2, spl3)
    ax4.fill_between(angle, y2, y3, linewidth=1, alpha=0.4, color='lightsteelblue')

    # rim thickness plot models
    mean_rt = np.mean(file["rim_thickness"][i][:], axis=0)
    std_rt = np.std(file["rim_thickness"][i][:], axis=0)

    x = np.arange(0, 360, 0.5)
    t = np.linspace(0, 360, 720)

    angle = [math.radians(ts) for ts in t]
    w = np.ones_like(x)
    w[0] = 100
    w[-1] = 100
    x2 = np.linspace(0, 360, 720)

    ax5.set_theta_zero_location('S')
    ax5.set_theta_direction(-1)
    ax5.set_ylim(0, 100)
    # mean rim thickness
    spl1 = splrep(x, mean_rt, s=50, w=w)
    y1 = splev(x2, spl1)
    ax5.plot(angle, y1, linewidth=1, color='midnightblue')
    # stdv rim thickness
    spl2 = splrep(x, mean_rt - std_rt, s=50, w=w)
    y2 = splev(x2, spl2)
    spl3 = splrep(x, mean_rt + std_rt, s=50, w=w)
    y3 = splev(x2, spl3)
    ax5.fill_between(angle, y2, y3, linewidth=1, alpha=0.4, color='lightsteelblue')

    plt.savefig(save_dir + "/" + Chaksu["id"][i].decode("utf-8") + "_rim_thickness.pdf")
    plt.show()
    plt.close()